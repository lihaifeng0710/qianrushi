//=====================================================================
//文件名称：common.h
//功能概要：公共要素头文件
//版权所有：苏大arm技术中心(sumcu.suda.edu.cn)
//更新记录：2017-04-07   V1.0
//=====================================================================
#ifndef _COMMON_H    //防止重复定义（_COMMON_H  开头)
#define _COMMON_H
#define GLOBLE_VAR
//1．芯片寄存器映射文件及处理器内核属性文件
#include "mcu.h"
#include "svc.h"


//2．定义开关总中断
#define ENABLE_INTERRUPTS   __enable_irq()  //开总中断
#define DISABLE_INTERRUPTS  __disable_irq()  //关总中断

//3．位操作宏函数（置位、清位、获得寄存器一位的状态）
#define BCLR(bit,Register)  ((Register) &= ~(1<<(bit)))  //清寄存器的一位
#define BGET(bit,Register)  (((Register) >> (bit)) & 1)  //获得寄存器一位的状态
#define BSET(bit,Register)  ((Register) |= (1<<(bit)))    //置寄存器的一位

//4．重定义基本数据类型（类型别名宏定义）
typedef unsigned char        uint_8;   // 无符号8位数，字节
typedef unsigned short int   uint_16;  // 无符号16位数，字
typedef unsigned long int    uint_32;  // 无符号32位数，长字
typedef unsigned long long   uint_64;
typedef char                   int_8;    // 有符号8位数
typedef short int            int_16;   // 有符号16位数
typedef int                  int_32;   // 有符号32位数
typedef long long            int_64;
//不优化类型
typedef volatile uint_8      vuint_8;  // 不优化无符号8位数，字节
typedef volatile uint_16     vuint_16; // 不优化无符号16位数，字
typedef volatile uint_32     vuint_32; // 不优化无符号32位数，长字
typedef volatile int_8       vint_8;   // 不优化有符号8位数
typedef volatile int_16      vint_16;  // 不优化有符号16位数
typedef volatile int_32      vint_32;  // 不优化有符号32位数

//5. 定义系统使用的时钟频率
#define  SYSTEM_CLK_KHZ   SystemCoreClock/1000     // 芯片系统时钟频率(KHz)
#define  BUS_CLK_KHZ      SYSTEM_CLK_KHZ/2         // 芯片总线时钟频率(KHz)

//============================================================================
//函数名称：enable_irq
//函数返回：无
//参数说明：irq：irq号, 各个模块的中断号定义在MKL25Z.h中
//功能概要：使能irq中断
//============================================================================
void enable_irq (IRQn_Type irq);

//============================================================================
//函数名称：disable_irq
//函数返回：无
//参数说明：irq：irq号, 各个模块的中断号定义在MKL25Z.h中
//功能概要：禁止irq中断
//============================================================================
void disable_irq (IRQn_Type irq);

//======================================================================
//函数名称：Delay_us
//函数返回：无
//参数说明：无
//功能概要：延时 - 微秒级
//======================================================================
void Delay_us(vuint_16 u16us);

//======================================================================
//函数名称：Delay_us
//函数返回：无
//参数说明：无
//功能概要：延时 - 毫秒级
//======================================================================
void Delay_ms(vuint_16 u16ms);

//======================================================================
//函数名称：svc1_init
//函数返回：无
//参数说明：返回类型为void*，返回值时为BIOS中API接口表首地址
//功能概要：获取BIOS中API接口表首地址
//======================================================================
SVC1_INIT(svc1_init,void *,1)

//=======================函数注释区=======================================
//======================================================================
//函数名称：sysTimeGet
//函数返回：无
//参数说明：无
//功能概要：获取系统时间
//======================================================================
//uint_64 sysTimeGet(void);

//======================================================================
//函数名称：sysTimeSet
//函数返回：无
//参数说明：time：时间
//功能概要：设置系统时间
//======================================================================
//void sysTimeSet(uint_64 time);

//======================================================================
//函数名称：setVector
//函数返回：无
//参数说明：IRQn：中断向量号，vector中断服务程序函数
//功能概要：动态修改指定的中断向量的中断服务程序
//======================================================================
//void setVector(IRQn_Type IRQn, uint32_t vector);

//======================================================================
//函数名称：bios_version
//函数返回：无
//参数说明：version：版本号字符串首地址
//功能概要：动态获取bios版本号
//======================================================================
//void bios_version(uint_8* version);

//======================================================================
//函数名称：set_UART_UE_Recv
//函数返回：无
//参数说明：IRQn：中断向量号，vector中断服务程序函数
//功能概要：动态修改指定的中断向量的中断服务程序
//======================================================================
//typedef void (*UART_UE_Recv_Event)(uint_16 len,uint_8* arr);
//void set_UART_UE_Recv(uint32_t vector);

//======================================================================
//函数名称：set_UART_Update_Recv
//函数返回：无
//参数说明：vector：中断处理事件函数
//功能概要：为更新串口增加处理事件
//======================================================================
//typedef void (*UART_Update_Recv_Event)(uint_8 ch);
//void set_UART_Update_Recv(uint32_t vector);


//=======================函数注释区结束====================================

//=======================函数定义区=======================================
#define sysTimeGet ((uint_32 (*)(void))(bios_fun_point[1]))

#define sysTimeSet ((void (*)(uint_32 time))(bios_fun_point[2]))

#define  setVector ((void (*)(IRQn_Type IRQn, uint32_t vector))(bios_fun_point[3]))

#define  bios_version ((void (*)(uint_8* version))(bios_fun_point[4]))

#define  set_UART_UE_Recv ((void (*)(uint32_t vector))(bios_fun_point[5]))

#define  set_UART_Update_Recv ((void (*)(uint32_t vector))(bios_fun_point[6]))

//=======================函数定义区结束=====================================

#endif //防止重复定义（_COMMON_H  结尾)
