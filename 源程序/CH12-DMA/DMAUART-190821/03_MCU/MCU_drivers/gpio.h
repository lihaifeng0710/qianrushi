//=====================================================================
//文件名称：gpio.h
//功能概要：gpio底层驱动构件头文件
//制作单位：苏州大学嵌入式系统与物联网研究所(sumcu.suda.edu.cn)
//版    本：2019-05-09  V2.0
//适用芯片：KL25、KL26、KL36
//=====================================================================

#ifndef _GPIO_H       //防止重复定义（_GPIO_H  开头)
#define _GPIO_H

#include "common.h"   //包含公共要素头文件

// GPIO引脚方向宏定义
#define GPIO_INPUT  (0)
#define GPIO_OUTPUT (1)
// GPIO引脚中断类型宏定义
#define LOW_LEVEL    (8)      //低电平触发
#define HIGH_LEVEL   (12)     //高电平触发
#define RISING_EDGE  (9)      //上升沿触发
#define FALLING_EDGE (10)     //下降沿触发
#define DOUBLE_EDGE  (11)     //双边沿触发

//选用自己的驱动还是BIOS内驱动宏定义
#define BIOS_GPIO (1)  //是（0）使用自己驱动，是（1）使用BIOS内驱动

//#if 条件编译（开始）
#if (BIOS_GPIO==0)     //是（0），使用自己驱动，编译以下声明
//=====================================================================
//函数名称：gpio_init
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//         dir：引脚方向（0=输入，1=输出,可用引脚方向宏定义）
//         state：引脚初始状态（0=低电平，1=高电平）
//功能概要：初始化指定引脚作为GPIO引脚功能，并定义为输入或输出，若是输出，
//         还指定初始状态是低电平或高电平
//=====================================================================
void gpio_init(uint_16 pin, uint_8 dir, uint_8 state);

//=====================================================================
//函数名称：gpio_set
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//         state：希望设置的引脚状态（0=低电平，1=高电平）
//功能概要：当指定引脚被定义为GPIO功能且为输出时，本函数设定引脚状态
//=====================================================================
void gpio_set(uint_16 pin, uint_8 state);

//=====================================================================
//函数名称：gpio_get
//函数返回：指定引脚的状态（1或0）
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//功能概要：当指定引脚被定义为GPIO功能且为输入时，本函数获取指定引脚状态
//=====================================================================
uint_8 gpio_get(uint_16 pin);

//=====================================================================
//函数名称：gpio_reverse
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//功能概要：当指定引脚被定义为GPIO功能且为输出时，本函数反转引脚状态
//=====================================================================
void gpio_reverse(uint_16 pin);

//=====================================================================
//函数名称：gpio_pull
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//         pullselect：下拉/上拉（0=下拉，1=上拉）
//功能概要：当指定引脚被定义为GPIO功能且为输入时，本函数设置引脚下拉/上拉
//=====================================================================
void gpio_pull(uint_16 pin, uint_8 pullselect);

//=====================================================================
//函数名称：gpio_enable_int
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//       irqtype：引脚中断类型，由宏定义给出。
//功能概要：当指定引脚被定义为GPIO功能且为输入时，本函数开启引脚中断，并
//          设置中断触发条件。
//=====================================================================
void gpio_enable_int(uint_16 pin,uint_8 irqtype);

//=====================================================================
//函数名称：gpio_disable_int
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//功能概要：当指定引脚被定义为GPIO功能且为输入时，本函数关闭引脚中断
//=====================================================================
void gpio_disable_int(uint_16 pin);

//=====================================================================
//函数名称：gpio_get_int
//函数返回：引脚GPIO中断标志（1或0）1表示引脚有GPIO中断，0表示引脚没有GPIO中断。
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//功能概要：当指定引脚被定义为GPIO功能且为输入时,获取中断标志。
//=====================================================================
uint_8 gpio_get_int(uint_16 pin);

//=====================================================================
//函数名称：gpio_clear_int
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//功能概要：当指定引脚被定义为GPIO功能且为输入时,清除中断标志。
//=====================================================================
void gpio_clear_int(uint_16 pin);

//=====================================================================
//函数名称：gpio_clear_allint
//函数返回：无
//参数说明：无
//功能概要：清除所有端口的GPIO中断
//=====================================================================
void gpio_clear_allint(void);

//=====================================================================
//函数名称：gpio_drive_strength
//函数返回：无
//参数说明：pin:引脚（使用宏定义可在<04_GEC>文件夹下的gec.h文件中找到定义）
//       control：控制引脚的驱动能力，1=高驱动，0=正常驱动
//      （引脚被配置为数字输出时，引脚控制寄存器的DSE=1：高驱动， DSE=0：正常驱动）
//功能概要：（引脚驱动能力：指引脚输入或输出电流的承受力，一般用mA单位度量
//            ，正常驱动能力5mA,高驱动能力18mA。）当引脚被配置为数字输出时,
//            对引脚的驱动能力进行设置。
//=====================================================================
void gpio_drive_strength(uint_16 pin, uint_8 control);

#elif (BIOS_GPIO==1)     //是（1），使用BIOS内驱动，编译以下声明

#define gpio_init  ((void (*)(uint_16 pin, uint_8 dir, uint_8 state))(bios_fun_point[23]))

#define gpio_set  ((void (*)(uint_16 pin, uint_8 state))(bios_fun_point[24]))

#define gpio_get  ((uint_8 (*)(uint_16 pin))(bios_fun_point[25]))

#define gpio_reverse  ((void (*)(uint_16 pin))(bios_fun_point[26]))

#define gpio_pull  ((void (*)(uint_16 pin, uint_8 pullselect))(bios_fun_point[27]))

#define gpio_enable_int  ((void (*)(uint_16 pin,uint_8 irqtype))(bios_fun_point[28]))

#define gpio_disable_int  ((void (*)(uint_16 pin))(bios_fun_point[29]))

#define gpio_get_int  ((uint_8 (*)(uint_16 pin))(bios_fun_point[30]))

#define gpio_clear_int  ((void (*)(uint_16 pin))(bios_fun_point[31]))

#define gpio_clear_allint  ((void (*)(void))(bios_fun_point[32]))

#define gpio_drive_strength  ((void (*)(uint_16 pin, uint_8 control))(bios_fun_point[33]))


#endif     //#if 条件编译（结尾）

#endif     //防止重复定义（_GPIO_H  结尾)
