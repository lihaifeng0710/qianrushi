//=====================================================================
//文件名称：flash.h
//功能概要：flash底层驱动构件头文件
//制作单位：苏州大学嵌入式系统与物联网研究所(sumcu.suda.edu.cn)
//版    本：  2019-05-09  V2.0
//适用芯片：KL25、KL26、KL36
//=====================================================================

#ifndef _FLASH_H
#define _FLASH_H

#include "common.h"    //包含公共要素头文件
//选用自己的驱动还是BIOS内驱动宏定义
#define BIOS_FLASH (1)  //是（0）使用自己驱动，是（1）使用BIOS内驱动

//#if 条件编译（开始）
#if (BIOS_FLASH==0)     //是（0），使用自己驱动，编译以下声明

//======================================================================
//函数名称：flash_init
//函数返回：无
//参数说明：无
//功能概要：flash初始化
//======================================================================
void flash_init(void);

//======================================================================
//函数名称：flash_erase_sector
//函数返回：函数执行执行状态：0=正常；1=异常。
//参数说明：sect：目标扇区号（范围取决于实际芯片，见mcu.h）
//功能概要：擦除flash存储器的sect扇区
//======================================================================
uint_8 flash_erase(uint_16 sect);

//======================================================================
//函数名称：flash_write
//函数返回：函数执行状态：0=正常；1=异常。
//参数说明：sect：扇区号（范围取决于实际芯片，见mcu.h）
//        offset:写入扇区内部偏移地址（要求为0,4，8,12，......）
//        N：写入字节数目（要求为4，8,12,......）
//        buf：源数据缓冲区首地址
//功能概要：将buf开始的N字节写入到flash存储器的sect扇区的 offset处
//======================================================================
uint_8 flash_write(uint_16 sect,uint_16 offset,uint_16 N,uint_8 *buf);

//======================================================================
//函数名称：flash_read_logic
//函数返回：无
//参数说明：sect：扇区号（范围取决于实际芯片，见mcu.h）
//        offset:扇区内部偏移地址（要求为0,4，8,12，......）
//        N：读字节数目（要求为4，8,12,......）
//        dest：读出数据存放处（传地址，目的是带出所读数据，RAM区）
//功能概要：读取flash存储器的sect扇区的 offset处开始的N字节，到RAM区dest处
//========================================================================
void flash_read_logic(uint_8 *dest,uint_16 sect,uint_16 offset,uint_16 N);

//========================================================================
//函数名称：flash_read_physical
//函数返回：无
//参数说明：  dest：目标地址，要求为4的倍数（例如：0x00000004）
//        N：读字节数目（0~1020,要求为4，8,12,......）
//        dest：读出数据存放处（传地址，目的是带出所读数据，RAM区）
//功能概要：读取flash指定地址的内容
//========================================================================
void flash_read_physical(uint_8 *dest,uint_32 addr,uint_16 N);

//========================================================================
//函数名称：flash_protect
//函数返回：无
//参数说明：sect：待保护区域的扇区号入口值
//功能概要：flash保护操作
//说        明：每调用本函数一次，保护4个扇区（M~M+3）
//========================================================================
void flash_protect(uint_16 sect);

//========================================================================
//函数名称：flash_isempty
//函数返回：1=目标区域为空；0=目标区域非空。
//参数说明：所要探测的flash区域初始地址及范围
//功能概要：flash判空操作
//========================================================================
uint_8 flash_isempty(uint_16 sect,uint_16 N);

//========================================================================
//函数名称：flash_unprotect
//函数返回：无
//参数说明：所要解保护的扇区
//功能概要：flash扇区解保护操作
//========================================================================
void flash_unprotect(uint_16 sect);

//========================================================================
//函数名称：flashCtl_isSectorProtected
//函数返回：1=扇区被保护；0=扇区未被保护
//参数说明：所要检测的扇区
//功能概要：判断flash扇区是否被保护
//=========================================================================
uint_8 flash_isSectorProtected(uint_16 sect);

//========================================================================
//函数名称：flash_write_physical
//函数返回：无
//参数说明：   destaddr：目标地址
//        N：写字节数目（0~1020,要求为4，8,12,......）
//        buf：写入数据存放处
//功能概要：读取flash指定地址的内容
//========================================================================
uint_8 flash_write_physical(uint_32 destaddr,uint_16 N,uint_8 *buf);

#elif (BIOS_FLASH==1)     //是（1），使用BIOS内驱动，编译以下声明

#define flash_init  ((void (*)(void))(bios_fun_point[13]))

#define flash_erase  ((uint_8 (*)(uint_16 sect))(bios_fun_point[14]))

#define flash_write  ((uint_8 (*)(uint_16 sect,uint_16 offset,uint_16 N,uint_8 *buf))(bios_fun_point[15]))

#define flash_read_logic  ((void (*)(uint_8 *dest,uint_16 sect,uint_16 offset,uint_16 N))(bios_fun_point[16]))

#define flash_read_physical  ((void (*)(uint_8 *dest,uint_32 addr,uint_16 N))(bios_fun_point[17]))

#define flash_protect  ((void (*)(uint_8 M))(bios_fun_point[18]))

#define flash_isempty  ((uint_8 (*)(uint_8 *buff,uint_16 N))(bios_fun_point[19]))

#define  flash_unprotect ((void (*)(uint_16 sect))(bios_fun_point[20]))

#define  flash_isSectorProtected ((uint_8 (*)(uint_16 sect))(bios_fun_point[21]))

#define  flash_write_physical ((uint_8 (*)(uint_32 destaddr,uint_16 N,uint_8 *buf))(bios_fun_point[22]))
//=======================函数定义区结束=====================================

#endif

#endif  //#ifndef _FLASH_H

//======================================================================
//声明：
//（1）我们开发的源代码，在本中心提供的硬件系统测试通过，真诚奉献给社会，
//    不足之处，欢迎指正。
//（2）对于使用非本中心硬件系统的用户，移植代码时，请仔细根据自己的硬件匹配。
//
//苏大arm技术中心,0512-65214835  http://sumcu.suda.edu.cn

